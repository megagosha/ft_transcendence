version: '3.7'
services:
  postgres:
    container_name: postgres-container
    image: postgres:alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      PG_DATA: /var/lib/postgresql/data
    ports: 
      - "${DB_PORT}"
    volumes: 
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
  nestjs:
    container_name: nestjs-container
    build:
      context: ./app
      dockerfile: Dockerfile
    volumes:
      - ./static/files/user:/home/node/static/files/user
      - ./static/files/user/:/home/node/static/files/chat
    env_file:
      - .env
    depends_on:
      - postgres
    restart: always
    ports:
      - "3000:${NESTJS_CONTAINER_PORT}"
    hostname: backend
    networks:
      - backend
  nginx:
    container_name: nginx-container
    build:
      context: ./front
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    ports:
      - "8080:8080"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=8080
    depends_on:
      - nestjs
    networks:
      - backend
#  angular:
#    container_name: angular-container
#    build:
#      context: ./front
#      dockerfile: Dockerfile
#    command: sh -c "npm start"
#    restart: always
#    env_file:
#      - .env
#    volumes:
#      - ./front:/app
#    ports:
#      - "${ANGULAR_HOST_PORT}:${ANGULAR_CONTAINER_PORT}"
#    networks:
#      - frontend
#      - nginx
#  adminer:
#    container_name: adminer-container
#    image: adminer
#    restart: always
#    ports:
#      - "${ADMINER_HOST_PORT}:${ADMINER_CONTAINER_PORT}"
#    networks:
#      - backend
#      - frontend

volumes:
  pgdata:

networks:
  backend:
    driver: bridge
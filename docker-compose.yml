version: '3.7'

services:
  postgres:
    container_name: postgres-container
    image: postgres:alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      PG_DATA: /var/lib/postgresql/data
    ports: # порты указываем из env явно
      - "${DB_HOST_PORT}:${DB_CONTAINER_PORT}"
    volumes: # network закинуть
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
  
  nestjs:
    container_name: nestjs-container
    build:
      context: ./app
      dockerfile: Dockerfile # stage?
    volumes:
      - ./app/:/usr/src/app
#      - ./usr/src/app/node_modules
#      - ./static:/var/www/app/static
    env_file: 
      - .env # при таком включении есть баг один с числами типа PORT=3000. Это чекать нужно, они иногда неопрокидываются. Я с этим долго провозился
    ports:
      - "${NESTJS_HOST_PORT}:${NESTJS_CONTAINER_PORT}" 
#    command: npm run start # Можем в Dockerfile просто добавить скрипт, который запускает и обновляет пакеты, все скачивает и т.д.
    depends_on:
      - postgres
    restart: always
#    links: # хз, никогда не опрокидывал так никогда. Можно оставить, но нужно глянуть, на сколько валидно
#      - postgres:postgres
    networks:
      - backend
      - frontend
  
  angular:
    container_name: angular-container
    build:
      context: ./front
      dockerfile: Dockerfile
    command: sh -c "npm start"
    restart: always
    env_file: 
      - .env # при таком включении есть баг один с числами типа PORT=3000. Это чекать нужно, они иногда неопрокидываются. Я с этим долго провозился
    volumes:
      - ./front:/app
    ports:
      - "${ANGULAR_HOST_PORT}:${ANGULAR_CONTAINER_PORT}"
    # links:
    #   - main
    networks:
      - frontend

  adminer:
    container_name: adminer-container
    image: adminer
    restart: always
    ports:
      - "${ADMINER_HOST_PORT}:${ADMINER_CONTAINER_PORT}"
    networks:
      - backend
      - frontend

volumes:
  pgdata:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
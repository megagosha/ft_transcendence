{"ast":null,"code":"export class Coordinates {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.x = x;\n    this.y = y;\n  }\n\n}\nexport class AxisSpeed {\n  constructor(xSpeed, ySpeed) {\n    this.xSpeed = xSpeed;\n    this.ySpeed = ySpeed;\n  }\n\n}\nexport class GameObject {\n  constructor(height, width, maxSpeed, cords) {\n    this.height = height;\n    this.width = width;\n    this.maxSpeed = maxSpeed;\n    this.cords = cords;\n    this.color = \"orange\";\n  }\n\n  update(speed) {\n    this.cords.x += this.maxSpeed * speed.xSpeed;\n    this.cords.y += this.maxSpeed * speed.ySpeed;\n  }\n\n  setPos(x, y) {\n    this.cords.x = x;\n    this.cords.y = y;\n  }\n\n  getPos() {\n    return this.cords;\n  }\n\n  getBoundaries() {\n    return {\n      top: Math.round(this.cords.y) - this.height / 2,\n      bottom: Math.round(this.cords.y) + this.height / 2,\n      left: Math.round(this.cords.x) - this.width / 2,\n      right: Math.round(this.cords.x) + this.width / 2\n    };\n  }\n\n}\nexport class Ball extends GameObject {\n  constructor(gameHeight, gameWidth, color) {\n    super(gameHeight * 0.02, gameWidth * 0.02, 2, {\n      x: gameWidth / 2,\n      y: gameHeight / 2\n    });\n    this.color = color;\n  }\n\n  updateDimensions(gameWidth, gameHeight, left) {\n    this.height = 0.02 * gameHeight;\n    this.width = 0.02 * gameWidth;\n  }\n\n}\nexport class Paddle extends GameObject {\n  // public username: string = \"\";\n  constructor(gameWidth, gameHeight, left, color) {\n    super(0, 0, 10, {\n      x: 0,\n      y: 0\n    });\n    this.score = 0;\n    this.axisSpeed = {\n      xSpeed: 0,\n      ySpeed: 0\n    };\n    this.height = gameHeight * 0.15;\n    this.width = gameWidth * 0.02;\n    this.cords.x = left ? gameWidth * 0.1 : gameWidth * 0.90;\n    this.cords.y = gameHeight / 2;\n    this.color = color;\n  }\n\n  accelerate(minY, up) {\n    if (minY < 0 || minY > 1) return;\n\n    if (up) {\n      this.axisSpeed.ySpeed = Math.max(-1, this.axisSpeed.ySpeed - minY);\n    } else this.axisSpeed.ySpeed = Math.min(1, this.axisSpeed.ySpeed + minY);\n  }\n\n  slowDown(minY) {\n    if (this.axisSpeed.ySpeed < 0) {\n      this.axisSpeed.ySpeed = Math.min(this.axisSpeed.ySpeed + minY, 0);\n    }\n\n    if (this.axisSpeed.ySpeed > 0) this.axisSpeed.ySpeed = Math.max(this.axisSpeed.ySpeed - minY, 0);\n  }\n\n  move() {\n    this.cords.x += this.maxSpeed * this.axisSpeed.xSpeed;\n    this.cords.y += this.maxSpeed * this.axisSpeed.ySpeed;\n  }\n\n  updateDimensions(gameWidth, gameHeight, left) {\n    this.height = 0.15 * gameHeight;\n    this.width = 0.01 * gameWidth;\n    this.cords.x = left ? gameWidth * 0.1 : gameWidth * 0.90;\n  }\n\n}\nexport class Game {\n  constructor(width, height, gameState) {\n    this.players = {};\n    this.width = width;\n    this.height = height;\n    this.ball = new Ball(width, height, gameState.game.ball.color);\n    this.players[gameState.left.id] = new Paddle(this.width, this.height, true, gameState.game.players[gameState.left.id].color);\n    this.players[gameState.right.id] = new Paddle(this.width, this.height, false, gameState.game.players[gameState.right.id].color);\n  }\n\n  updateDimensions(width, height) {\n    for (let player in this.players) {\n      if (this.players[player].cords.x < this.width * 0.12) this.players[player].updateDimensions(width, height, true);else this.players[player].updateDimensions(width, height, false);\n    }\n\n    this.width = width;\n    this.height = height;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}
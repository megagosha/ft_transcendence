{"ast":null,"code":"import { ChatType, UserChatStatus } from \"../services/chat.service\";\nimport { ChatRoomDirective } from \"./chat-room/chat-room.directive\";\nimport { ChatRoomComponent } from \"./chat-room/chat-room.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/chat.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../services/user.service\";\nimport * as i4 from \"@angular/material/snack-bar\";\n\nfunction ChatComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelementStart(1, \"p\", 8);\n    i0.ɵɵtext(2, \" Select a chat to start messaging \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ChatComponent_ng_template_7_Template(rf, ctx) {}\n\nexport let ChatComponent = /*#__PURE__*/(() => {\n  class ChatComponent {\n    constructor(chatService, http, userService, snackBar) {\n      this.chatService = chatService;\n      this.http = http;\n      this.userService = userService;\n      this.snackBar = snackBar;\n      this.user = this.userService.user;\n      this.messages = [];\n      this.messageText = '';\n      this.saveScrollPosition = 0;\n    }\n\n    ngOnInit() {\n      const chat = this.chatService.getChat();\n\n      if (chat != null) {\n        this.enterChatRoom(chat);\n      }\n    }\n\n    enterChatRoom(chat) {\n      this.chatRoom.containerRef.clear();\n\n      if (chat.type != ChatType.PUBLIC && !chat.verified) {\n        this.chatService.setChat(null, null);\n        this.snackBar.open(`You should join to chat`, \"OK\", {\n          duration: 5000\n        });\n        return;\n      }\n\n      if (chat.userChatStatus == UserChatStatus.BANNED) {\n        this.chatService.setChat(null, null);\n        this.snackBar.open(`You have been banned before: ${this.chatService.getTimeBlockExpire(chat.dateTimeBlockExpire)}`, \"OK\", {\n          duration: 5000\n        });\n        return;\n      }\n\n      const containerRef = this.chatRoom.containerRef;\n      this.chatService.setChat(chat, containerRef);\n      containerRef.createComponent(ChatRoomComponent);\n    }\n\n    ngAfterViewInit() {}\n\n  }\n\n  ChatComponent.ɵfac = function ChatComponent_Factory(t) {\n    return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.ChatService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n  };\n\n  ChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatComponent,\n    selectors: [[\"app-chat\"]],\n    viewQuery: function ChatComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(ChatRoomDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chatRoom = _t.first);\n      }\n    },\n    decls: 8,\n    vars: 2,\n    consts: [[1, \"chat\"], [1, \"chat-selector\"], [1, \"chat-list\", 3, \"selectedChatEvent\"], [3, \"vertical\"], [1, \"messages-block\"], [\"class\", \"chat-not-entered\", 4, \"ngIf\"], [\"style\", \"height: 100%; width: 100%\", \"chatRoom\", \"\"], [1, \"chat-not-entered\"], [1, \"not-entered-message\"]],\n    template: function ChatComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-top-bar\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"app-chat-list\", 2);\n        i0.ɵɵlistener(\"selectedChatEvent\", function ChatComponent_Template_app_chat_list_selectedChatEvent_3_listener($event) {\n          return ctx.enterChatRoom($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"mat-divider\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtemplate(6, ChatComponent_div_6_Template, 3, 0, \"div\", 5);\n        i0.ɵɵtemplate(7, ChatComponent_ng_template_7_Template, 0, 0, \"ng-template\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"vertical\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.chatService.getChat() == null);\n      }\n    },\n    styles: [\".chat[_ngcontent-%COMP%]{position:fixed;margin:90px auto auto;width:80%;height:80%;top:0;bottom:0;right:0;left:0;display:flex;flex-direction:row}.chat-selector[_ngcontent-%COMP%]{flex-basis:30%;display:flex;flex-direction:column}.chat-list[_ngcontent-%COMP%]{height:100%}.mat-divider[_ngcontent-%COMP%]{margin-right:20px;margin-left:20px}.messages-block[_ngcontent-%COMP%]{flex-basis:70%;background-color:#f4f4f4;border-radius:15px}.chat-not-entered[_ngcontent-%COMP%]{height:100%;width:100%;display:flex;flex-direction:row;text-align:center}.not-entered-message[_ngcontent-%COMP%]{margin:auto;font-size:14pt;color:#9b9999}\"]\n  });\n  return ChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
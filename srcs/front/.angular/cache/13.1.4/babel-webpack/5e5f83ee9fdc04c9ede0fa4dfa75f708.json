{"ast":null,"code":"import { GameState } from \"./game.dto\";\nimport { Game } from \"./elements.entity\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/game.service\";\nimport * as i3 from \"../services/user.service\";\nconst _c0 = [\"canvasPoint\"];\n\nfunction GameComponent_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function GameComponent_button_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.stopGame();\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"stop\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GameComponent_button_14_mat_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"pause\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GameComponent_button_14_mat_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"play_arrow\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GameComponent_button_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function GameComponent_button_14_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.pauseGame();\n    });\n    i0.ɵɵtemplate(1, GameComponent_button_14_mat_icon_1_Template, 2, 0, \"mat-icon\", 11);\n    i0.ɵɵtemplate(2, GameComponent_button_14_mat_icon_2_Template, 2, 0, \"mat-icon\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.pause <= 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.pause > 0);\n  }\n}\n\nfunction GameComponent_countdown_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"countdown\", 12);\n    i0.ɵɵtext(1, \"Timeout:\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"config\", ctx_r3.cdConfig);\n  }\n}\n\nexport let GameComponent = /*#__PURE__*/(() => {\n  class GameComponent {\n    constructor(route, gameService, userService, router) {\n      var _a, _b;\n\n      this.route = route;\n      this.gameService = gameService;\n      this.userService = userService;\n      this.router = router;\n      this.width = 1000;\n      this.jsTimer = 0;\n      this.height = 660;\n      this.up = false;\n      this.down = false;\n      this.redrawFlag = false;\n      this.opponentId = 0;\n      this.cdConfig = {\n        leftTime: 0,\n        formatDate: ({\n          date\n        }) => `${date / 1000}`\n      }; // };\n\n      this.canvas = null;\n      this.canvasPoint = {};\n      this.pause = 0;\n\n      this.subscribeForPauseEvents = () => {\n        this.gameService.pause.subscribe(state => {\n          console.log(\"Pause event callback\");\n          console.log(state);\n          this.pause = state;\n\n          if (this.pause) {\n            this.cdConfig.leftTime = this.pause;\n            console.log(\"interval cleared\");\n            console.log(this.jsTimer);\n            clearInterval(this.jsTimer);\n            this.jsTimer = 0;\n          } else if (!this.gameService.watch && this.jsTimer == 0) {\n            console.log(\"interval created\");\n            this.jsTimer = setInterval(() => this.sendPos(), 16);\n          }\n        });\n      };\n\n      if (!((_a = this.gameService.gameState) === null || _a === void 0 ? void 0 : _a.left.id) || !((_b = this.gameService.gameState) === null || _b === void 0 ? void 0 : _b.right.id)) router.navigateByUrl(\"/chat\");\n      if (this.gameService.gameState != undefined) this.gameState = this.gameService.gameState;else {\n        this.gameState = new GameState(); // should never execute\n\n        router.navigateByUrl(\"/chat\");\n      }\n      this.adjustDimensions();\n      this.opponentId = this.gameState.left.id == this.userService.user.id ? this.gameState.right.id : this.gameState.left.id;\n      this.game = new Game(this.width, this.height, this.gameState);\n      this.updateObjects(this.gameState.game, this.gameState.left.id, this.gameState.right.id);\n      if (this.gameState) this.pause = this.gameState.paused;\n      if (this.gameService.gameState == undefined) this.router.navigate([\"/chat\"]);\n    }\n\n    ngOnInit() {\n      this.ctx = this.canvasPoint.nativeElement.getContext(\"2d\");\n      this.canvas = this.canvasPoint.nativeElement;\n      this.gameService.gameUpdate().subscribe(game => {\n        if (!game || !game.players) return;\n        this.updateObjects(game, this.gameState.left.id, this.gameState.right.id);\n      });\n      console.log(\"pause\");\n      console.log(this.pause);\n\n      if (!this.gameService.watch && !this.pause) {\n        this.jsTimer = setInterval(() => this.sendPos(), 16);\n      }\n\n      this.subscribeForPauseEvents();\n      this.render();\n    }\n\n    ngOnDestroy() {\n      clearInterval(this.jsTimer);\n      this.jsTimer = 0;\n\n      if (this.gameService.watch) {\n        this.gameService.watch = false;\n        return;\n      }\n\n      this.pause = 0;\n      this.gameService.endGame(this.userService.user.id);\n    }\n\n    adjustedCords(isHeight, cord) {\n      if (isHeight) return this.height / 100 * cord;else return this.width / 100 * cord;\n    }\n\n    setObjectPos(obj, x, y) {\n      obj.cords.x = this.adjustedCords(false, x);\n      obj.cords.y = this.adjustedCords(true, y);\n    }\n\n    updateObjects(game, player1, player2) {\n      this.setObjectPos(this.game.ball, game.ball.x, game.ball.y);\n      this.setObjectPos(this.game.players[this.opponentId], game.players[this.opponentId].x, game.players[this.opponentId].y);\n      this.gameState.left.score = game.players[player1].score;\n      this.gameState.right.score = game.players[player2].score;\n    }\n\n    renderBall(obj, color) {\n      var _a, _b, _c;\n\n      if (!this.ctx) return;\n      this.ctx.fillStyle = (_c = (_b = (_a = this.gameService) === null || _a === void 0 ? void 0 : _a.gameState) === null || _b === void 0 ? void 0 : _b.game.ball.color) !== null && _c !== void 0 ? _c : \"orange\";\n      this.ctx.beginPath();\n      this.ctx.arc(obj.cords.x, obj.cords.y, this.width * 0.01, 0, 2 * Math.PI);\n      this.ctx.fill();\n    }\n\n    drawRectObj(obj, color, rightPaddle) {\n      if (!this.ctx) return;\n      this.ctx.fillStyle = color;\n      let bounds = obj.getBoundaries();\n      if (rightPaddle) this.ctx.fillRect(bounds.left - obj.width * 2, bounds.top, obj.width, obj.height);else {\n        this.ctx.fillRect(bounds.left, bounds.top, obj.width, obj.height);\n      }\n    }\n\n    render() {\n      if (!this.ctx || !this.game) return;\n      this.ctx.fillStyle = \"rgb(0,0,0)\";\n      this.ctx.fillRect(0, 0, this.width, this.height);\n      this.drawRectObj(this.game.players[this.gameState.left.id], this.gameState.game.players[this.gameState.left.id].color, false);\n      this.drawRectObj(this.game.players[this.gameState.right.id], this.gameState.game.players[this.gameState.right.id].color, true);\n      this.renderBall(this.game.ball, this.game.ball.color);\n      window.requestAnimationFrame(() => this.render());\n    }\n\n    sendPos() {\n      if (!this.game) return;\n      let bounds = this.game.players[this.userService.user.id].getBoundaries();\n\n      if (this.up && bounds.top > 0) {\n        this.game.players[this.userService.user.id].accelerate(0.5, true);\n      } else if (this.down && bounds.bottom < this.height) this.game.players[this.userService.user.id].accelerate(0.5, false);else this.game.players[this.userService.user.id].slowDown(0.7);\n\n      this.game.players[this.userService.user.id].move();\n      this.gameService.sendPaddleMove({\n        x: this.game.players[this.userService.user.id].cords.x / this.width * 100,\n        y: this.game.players[this.userService.user.id].cords.y / this.height * 100\n      });\n    }\n\n    redraw() {\n      this.width = window.innerWidth * 0.9;\n      this.height = window.innerHeight * 0.6;\n      this.game.updateDimensions(this.width, this.height);\n    }\n\n    handleKeyDown(event) {\n      if (!this.game || this.gameService.watch) return;\n\n      if (event.code == \"ArrowUp\" || event.code == \"ArrowRight\") {\n        this.up = true;\n      }\n\n      if (event.code == \"ArrowDown\" || event.code == \"ArrowLeft\") {\n        this.down = true;\n      }\n\n      window.focus();\n    }\n\n    handleKeyUp(event) {\n      if (!this.game || this.gameService.watch) return;\n\n      if (event.code == \"ArrowUp\" || event.code == \"ArrowRight\") {\n        this.up = false;\n      }\n\n      if (event.code == \"ArrowDown\" || event.code == \"ArrowLeft\") {\n        this.down = false;\n      }\n\n      window.focus();\n    } // adjustForDpi() {\n    //     if (!this.canvas)\n    //         return;\n    //     // this.canvas.style.width = \"100%\";\n    //\n    // }\n\n\n    adjustDimensions() {\n      let width = window.innerWidth;\n      let height = window.innerHeight;\n      this.width = width * 0.8;\n      this.height = height * 0.8;\n    }\n\n    stopGame() {\n      this.gameService.gameStop();\n    }\n\n    pauseGame() {\n      if (this.pause) {\n        this.gameService.sendUnPause();\n      } else {\n        this.gameService.sendPause();\n      }\n    }\n\n  }\n\n  GameComponent.ɵfac = function GameComponent_Factory(t) {\n    return new (t || GameComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.GameService), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i1.Router));\n  };\n\n  GameComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GameComponent,\n    selectors: [[\"app-game\"]],\n    viewQuery: function GameComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasPoint = _t.first);\n      }\n    },\n    hostBindings: function GameComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function GameComponent_resize_HostBindingHandler() {\n          return ctx.redraw();\n        }, false, i0.ɵɵresolveWindow)(\"keydown\", function GameComponent_keydown_HostBindingHandler($event) {\n          return ctx.handleKeyDown($event);\n        }, false, i0.ɵɵresolveWindow)(\"keyup\", function GameComponent_keyup_HostBindingHandler($event) {\n          return ctx.handleKeyUp($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 19,\n    vars: 9,\n    consts: [[\"name\", \"viewport\", \"content\", \"width=device-width, initial-scale=1\"], [\"gameCanvas\", \"\"], [1, \"game-row\"], [1, \"score-block\"], [\"class\", \"game-action-btn\", \"mat-mini-fab\", \"\", \"color\", \"warn\", \"aria-label\", \"Stop game\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"game-action-btn\", \"mat-mini-fab\", \"\", \"color\", \"primary\", \"aria-label\", \"Pause game\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"countdown\", 3, \"config\", 4, \"ngIf\"], [1, \"game-canvas\", 3, \"width\", \"height\"], [\"canvasPoint\", \"\"], [\"mat-mini-fab\", \"\", \"color\", \"warn\", \"aria-label\", \"Stop game\", 1, \"game-action-btn\", 3, \"click\"], [\"mat-mini-fab\", \"\", \"color\", \"primary\", \"aria-label\", \"Pause game\", 1, \"game-action-btn\", 3, \"click\"], [4, \"ngIf\"], [1, \"countdown\", 3, \"config\"]],\n    template: function GameComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-top-bar\");\n        i0.ɵɵelement(1, \"meta\", 0, 1);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"h3\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"h1\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"h1\");\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"h3\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, GameComponent_button_13_Template, 3, 0, \"button\", 4);\n        i0.ɵɵtemplate(14, GameComponent_button_14_Template, 3, 2, \"button\", 5);\n        i0.ɵɵtemplate(15, GameComponent_countdown_15_Template, 2, 1, \"countdown\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\");\n        i0.ɵɵelement(17, \"canvas\", 7, 8);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.gameState.left == null ? null : ctx.gameState.left.username);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.gameState.left == null ? null : ctx.gameState.left.score);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.gameState.right == null ? null : ctx.gameState.right.score);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.gameState.right == null ? null : ctx.gameState.right.username);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gameService.watch != true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.gameService.watch != true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.pause);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"width\", ctx.width);\n        i0.ɵɵpropertyInterpolate(\"height\", ctx.height);\n      }\n    },\n    styles: [\"html[_ngcontent-%COMP%], body[_ngcontent-%COMP%]{margin:0;width:100%;height:100%;background:rgba(23,24,23,1);color:#fff;overflow:hidden}.game-canvas[_ngcontent-%COMP%]{padding-left:0;padding-right:0;margin-left:auto;margin-right:auto;display:block}.score-block[_ngcontent-%COMP%]{justify-content:center;width:100%;display:flex;flex-direction:row}.player-score-container[_ngcontent-%COMP%]{margin:10px 50px 10px 10px}.score-block[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{margin-right:20px;margin-top:10px;color:#673ab7;font-weight:bolder}.score-block[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin-right:20px;margin-top:10px}.game-row[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:space-evenly;width:80%;height:50px;margin-top:10px}.game-action-btn[_ngcontent-%COMP%]{margin-right:10px}.countdown[_ngcontent-%COMP%]{justify-content:center;margin:auto auto auto 20px;font-weight:700;font-size:20px}\"]\n  });\n  return GameComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
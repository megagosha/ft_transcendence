{"ast":null,"code":"import { of, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n\n    handleAuthError(err) {\n      //handle your auth error or rethrow\n      if (err.status === 401 || err.status === 403) {\n        //navigate /delete cookies or whatever\n        this.router.navigateByUrl(`login`); // if you've caught / handled the error, you don't want to rethrow it unless you also want downstream consumers to have to handle it as well.\n\n        return of(err.message); // or EMPTY may be appropriate here\n      }\n\n      return throwError(err);\n    }\n\n    intercept(request, next) {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        const cloned = request.clone({\n          headers: request.headers.set('Authorization', `Bearer ${token}`).set('Access-Control-Allow-Origin', '*')\n        });\n        return next.handle(cloned).pipe(catchError(x => this.handleAuthError(x))); //here use an arrow function, otherwise you may get \"Cannot read property 'navigate' of undefined\" on angular 4.4.2/net core 2/webpack 2.70;\n      }\n\n      if (!token) this.router.navigateByUrl('login');\n      return next.handle(request);\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}
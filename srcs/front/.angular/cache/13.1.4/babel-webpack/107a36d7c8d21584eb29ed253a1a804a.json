{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { io } from \"socket.io-client\";\nimport { SnackbarActionsComponent } from \"../snackbar-actions/snackbar-actions.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nexport let GameService = /*#__PURE__*/(() => {\n  class GameService {\n    constructor(_snackBar, router, http) {\n      this._snackBar = _snackBar;\n      this.router = router;\n      this.http = http;\n      this.oppenentId = 0;\n      this.watch = false;\n      this.startingPos = {\n        x: 0,\n        y: 0\n      };\n      this.game = new BehaviorSubject({\n        ball: {\n          x: 0,\n          y: 0,\n          color: \"orange\"\n        },\n        players: {}\n      });\n      this.pause = new BehaviorSubject(0); // public game: BehaviorSubject<GameDto> = new BehaviorSubject<GameDto>({ball: {x: 0, y: 0, color: \"orange\"}, players: {}});\n\n      this.left = false;\n\n      this.getNewGameEvent = () => {\n        if (!this.socket) return;\n        this.socket.on(\"pending_invite\", message => {\n          this._snackBar.openFromComponent(SnackbarActionsComponent, {\n            data: message\n          });\n\n          console.log(message);\n        });\n        this.startGame();\n      };\n\n      this.startGame = () => {\n        if (!this.socket) return;\n        this.socket.on(\"game_ready\", data => {\n          var _a, _b;\n\n          if (!this.userService || !this.socket) return;\n          this.pause = new BehaviorSubject(data.game.paused);\n          console.log(data);\n          this.getPauseEvenets();\n          this.getUnPauseEvent();\n          this.socket.off(\"pending_invite\");\n          if (!((_a = data.game.left) === null || _a === void 0 ? void 0 : _a.id) || !((_b = data.game.right) === null || _b === void 0 ? void 0 : _b.id)) return;\n          this.gameState = data.game;\n          this.gameEnded(); // this.gameUpdate();\n\n          this.router.navigateByUrl(\"/game\");\n        });\n      };\n\n      this.gameEnded = () => {\n        if (!this.socket) return;\n        this.socket.on(\"game_ended\", data => {\n          this.router.navigate([\"/results\", {\n            id: data.id\n          }]);\n          console.log(\"game ended: \");\n          console.log(data.id);\n        });\n      };\n\n      this.gameUpdate = () => {\n        if (!this.socket) return this.game.asObservable();\n        console.log(\"game update created\");\n        this.socket.on(\"game_update\", game => {\n          this.game.next(game);\n        });\n        return this.game.asObservable();\n      };\n\n      this.snackBar = _snackBar;\n    }\n\n    init(us) {\n      this.userService = us;\n      let token = localStorage.getItem(\"token\");\n      if (!token) token = \"\";\n      console.log(token);\n      this.socket = io('/game_sock', {\n        transports: ['websocket'],\n        auth: {\n          token: token\n        },\n        reconnectionAttempts: 2\n      });\n      console.log(this.socket);\n      this.listenError();\n      this.getNewGameEvent();\n    }\n\n    inviteToPlay(id) {\n      if (!this.socket) return;\n      this.socket.emit(\"invite_player\", {\n        userId: id\n      });\n    }\n\n    acceptInvite(userId) {\n      if (!this.socket) return;\n      console.log(\"accept invite from user \" + userId);\n      this.socket.emit(\"accept_invite\", {\n        userId: userId\n      });\n    }\n\n    declineInvite(userId) {\n      if (!this.socket) return;\n      this.socket.emit(\"invite_declined\", {\n        userId: userId\n      });\n    }\n\n    sendPaddleMove(cords) {\n      if (!this.socket) return;\n      this.socket.emit(\"game_move\", {\n        x: cords.x,\n        y: cords.y\n      });\n    }\n\n    endGame(userId) {\n      if (!this.socket) return;\n      this.socket.off(\"watch_game\");\n      this.socket.off(\"game_move\");\n      this.socket.off(\"game_update\");\n      this.socket.off(\"game_ended\");\n      this.socket.off(\"game_paused\");\n      this.socket.off(\"game_unpaused\");\n      this.socket.emit(\"game_end\", {\n        userId: userId\n      });\n      this.watch = false;\n      this.gameState = undefined;\n      this.oppenentId = 0;\n      this.getNewGameEvent();\n    }\n\n    watchGame(userId) {\n      if (!this.socket) return;\n      this.gameEnded();\n      this.socket.emit(\"watch_game\", {\n        userId: userId\n      }, response => {\n        this.watch = true;\n        this.gameState = response;\n        if (response.paused > 0) this.pause.next(response.paused);\n        this.getPauseEvenets();\n        this.router.navigate([\"/game\"]);\n        console.log(response);\n      });\n    }\n\n    getGameResult(gameId) {\n      console.log('get game resuilts init with id :' + gameId);\n      return this.http.get('/api/game/result', {\n        params: {\n          id: gameId\n        }\n      });\n    }\n\n    getLadder() {\n      return this.http.get(\"/api/game/ladder\");\n    }\n\n    gameStop() {\n      var _a;\n\n      if (!this.socket) return;\n      this.socket.emit(\"game_end\", {\n        userId: (_a = this.userService) === null || _a === void 0 ? void 0 : _a.user.id\n      });\n    }\n\n    matchMaking(paddleColor, ballColor) {\n      var _a;\n\n      if (!this.socket) return;\n      this.socket.emit(\"random_opponent\", {\n        userId: (_a = this.userService) === null || _a === void 0 ? void 0 : _a.user.id,\n        paddleColor: paddleColor,\n        ballColor: ballColor\n      });\n    }\n\n    getPersonalHistory(userId, take, skip) {\n      return this.http.get(\"/api/game/personal_history\", {\n        params: {\n          userId: userId,\n          take: take,\n          skip: skip\n        }\n      });\n    }\n\n    listenError() {\n      var _a, _b, _c;\n\n      (_a = this.socket) === null || _a === void 0 ? void 0 : _a.on('/error', error => {\n        this.snackBar.open(error.error, \"OK\", {\n          duration: 3000\n        });\n      });\n      (_b = this.socket) === null || _b === void 0 ? void 0 : _b.on(\"disconnect\", () => {\n        this.snackBar.open(\"Cannot connect to server\", \"OK\", {\n          duration: 3000\n        });\n      });\n      (_c = this.socket) === null || _c === void 0 ? void 0 : _c.on(\"connect_error\", reason => {\n        this.snackBar.open(\"Cannot connect to server\", \"OK\", {\n          duration: 3000\n        });\n      });\n    }\n\n    getPauseEvenets() {\n      if (!this.socket) return;\n      this.socket.on(\"game_paused\", data => {\n        if (data.time > 0) {\n          this.getUnPauseEvent();\n          console.log(\"game paused event triggered\");\n          if (this.socket) this.socket.off(\"game_update\");\n          this.pause.next(data.time);\n        }\n      });\n    }\n\n    getUnPauseEvent() {\n      if (!this.socket) return;\n      this.socket.on(\"game_unpaused\", result => {\n        if (result) {\n          console.log(\"game unpaused event triggered\");\n          this.pause.next(0);\n          this.gameUpdate();\n        }\n      });\n    }\n\n    sendPause() {\n      if (!this.socket) return;\n      this.socket.emit(\"pause_game\", {\n        timeOut: 30\n      });\n    }\n\n    sendUnPause() {\n      var _a;\n\n      if (!this.socket) return;\n      this.socket.emit(\"unpause_game\", {\n        userId: (_a = this.userService) === null || _a === void 0 ? void 0 : _a.user.id\n      });\n    }\n\n  }\n\n  GameService.ɵfac = function GameService_Factory(t) {\n    return new (t || GameService)(i0.ɵɵinject(i1.MatSnackBar), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HttpClient));\n  };\n\n  GameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GameService,\n    factory: GameService.ɵfac,\n    providedIn: \"root\"\n  });\n  return GameService;\n})();","map":null,"metadata":{},"sourceType":"module"}
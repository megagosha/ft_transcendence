{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nexport let GlobalErrorHandler = /*#__PURE__*/(() => {\n  class GlobalErrorHandler {\n    constructor(snackbar, zone) {\n      this.snackbar = snackbar;\n      this.zone = zone;\n    }\n\n    handleError(error) {\n      let message;\n\n      if (error instanceof HttpErrorResponse) {\n        if (error.status.toString().startsWith(\"5\")) {\n          message = \"An server error has occurred\";\n        } else if (error.error != null) {\n          message = error.error.message;\n        } else {\n          message = error.message;\n        }\n      } else if (error instanceof TypeError) {\n        return;\n      } else if (error instanceof Error) {\n        message = error.message;\n      } else {\n        message = error.rejection.message;\n      }\n\n      this.zone.run(() => this.snackbar.open(message || 'Undefined client error', \"OK\", {\n        duration: 4000\n      }));\n    }\n\n  }\n\n  GlobalErrorHandler.ɵfac = function GlobalErrorHandler_Factory(t) {\n    return new (t || GlobalErrorHandler)(i0.ɵɵinject(i1.MatSnackBar), i0.ɵɵinject(i0.NgZone));\n  };\n\n  GlobalErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalErrorHandler,\n    factory: GlobalErrorHandler.ɵfac\n  });\n  return GlobalErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module"}
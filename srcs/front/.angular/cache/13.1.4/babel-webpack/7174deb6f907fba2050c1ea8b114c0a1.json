{"ast":null,"code":"import { io } from \"socket.io-client\";\nimport { token } from \"../app.module\";\nimport { EnterPasswordComponent } from \"../chat/enter-password/enter-password.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./user.service\";\nimport * as i5 from \"@angular/material/dialog\";\nexport var ChatType = /*#__PURE__*/(() => {\n  (function (ChatType) {\n    ChatType[\"PROTECTED\"] = \"PROTECTED\";\n    ChatType[\"PUBLIC\"] = \"PUBLIC\";\n    ChatType[\"PRIVATE\"] = \"PRIVATE\";\n    ChatType[\"DIRECT\"] = \"DIRECT\";\n  })(ChatType || (ChatType = {}));\n\n  return ChatType;\n})();\nexport var UserChatRole = /*#__PURE__*/(() => {\n  (function (UserChatRole) {\n    UserChatRole[\"OWNER\"] = \"OWNER\";\n    UserChatRole[\"ADMIN\"] = \"ADMIN\";\n    UserChatRole[\"PARTICIPANT\"] = \"PARTICIPANT\";\n  })(UserChatRole || (UserChatRole = {}));\n\n  return UserChatRole;\n})();\nexport var UserChatStatus = /*#__PURE__*/(() => {\n  (function (UserChatStatus) {\n    UserChatStatus[\"ACTIVE\"] = \"ACTIVE\";\n    UserChatStatus[\"MUTED\"] = \"MUTED\";\n    UserChatStatus[\"BANNED\"] = \"BANNED\";\n  })(UserChatStatus || (UserChatStatus = {}));\n\n  return UserChatStatus;\n})();\nexport var UserStatus = /*#__PURE__*/(() => {\n  (function (UserStatus) {\n    UserStatus[\"ONLINE\"] = \"ONLINE\";\n    UserStatus[\"OFFLINE\"] = \"OFFLINE\";\n    UserStatus[\"ACTIVE\"] = \"ACTIVE\";\n    UserStatus[\"DISABLED\"] = \"DISABLED\";\n  })(UserStatus || (UserStatus = {}));\n\n  return UserStatus;\n})();\nexport var SubscriptionStatus = /*#__PURE__*/(() => {\n  (function (SubscriptionStatus) {\n    SubscriptionStatus[\"ACTIVE\"] = \"ACTIVE\";\n    SubscriptionStatus[\"NONACTIVE\"] = \"NONACTIVE\";\n  })(SubscriptionStatus || (SubscriptionStatus = {}));\n\n  return SubscriptionStatus;\n})();\nexport var ActionType = /*#__PURE__*/(() => {\n  (function (ActionType) {\n    ActionType[\"ADD\"] = \"ADD\";\n    ActionType[\"REMOVE\"] = \"REMOVE\";\n    ActionType[\"REFRESH\"] = \"REFRESH\";\n  })(ActionType || (ActionType = {}));\n\n  return ActionType;\n})();\nexport var ChangeType = /*#__PURE__*/(() => {\n  (function (ChangeType) {\n    ChangeType[\"CREATION\"] = \"CREATION\";\n    ChangeType[\"ADD_PARTICIPANT\"] = \"ADD_PARTICIPANT\";\n    ChangeType[\"REMOVE_PARTICIPANT\"] = \"REMOVE_PARTICIPANT\";\n    ChangeType[\"UPDATE_NAME\"] = \"UPDATE_NAME\";\n    ChangeType[\"UPDATE_DESCRIPTION\"] = \"UPDATE_DESCRIPTION\";\n    ChangeType[\"UPDATE_AVATAR\"] = \"UPDATE_AVATAR\";\n    ChangeType[\"JOIN_CHAT\"] = \"JOIN_CHAT\";\n    ChangeType[\"LEAVE_CHAT\"] = \"LEAVE_CHAT\";\n    ChangeType[\"LEAVE_PRIVATE_CHAT\"] = \"LEAVE_PRIVATE_CHAT\";\n    ChangeType[\"UPDATE_CHAT_USER\"] = \"UPDATE_CHAT_USER\";\n    ChangeType[\"UPDATE_ACCESS\"] = \"UPDATE_ACCESS\";\n  })(ChangeType || (ChangeType = {}));\n\n  return ChangeType;\n})();\nexport let ChatService = /*#__PURE__*/(() => {\n  class ChatService {\n    constructor(http, snackBar, router, userService, dialog) {\n      this.http = http;\n      this.snackBar = snackBar;\n      this.router = router;\n      this.userService = userService;\n      this.dialog = dialog;\n      this.currentChat = null;\n      this.currentChatDetails = null;\n      this.currentChatView = null;\n      this.chats = [];\n      this.socket = io(\"/chat\", {\n        transports: ['websocket'],\n        auth: {\n          token: token()\n        },\n        reconnectionAttempts: 2\n      });\n      this.listenError();\n      this.listenChatsUpdate();\n    }\n\n    getChat() {\n      return this.currentChat;\n    }\n\n    setChat(chat, chatView) {\n      var _a;\n\n      this.currentChat = chat;\n\n      if (this.currentChat == null) {\n        (_a = this.currentChatView) === null || _a === void 0 ? void 0 : _a.clear();\n        this.currentChatView = null;\n        this.currentChatDetails = null;\n      } else {\n        this.currentChatView = chatView;\n      }\n    }\n\n    setChats(chats) {\n      this.chats = chats;\n    }\n\n    setChatDetails(chatDetails) {\n      this.currentChatDetails = chatDetails;\n    }\n\n    treatChat(chat) {\n      var _a, _b;\n\n      if (chat.change != null) {\n        const change = chat.change;\n\n        switch (change.changeType) {\n          case ChangeType.CREATION:\n            this.insertChat(chat);\n            break;\n\n          case ChangeType.UPDATE_NAME:\n          case ChangeType.UPDATE_DESCRIPTION:\n          case ChangeType.UPDATE_AVATAR:\n          case ChangeType.ADD_PARTICIPANT:\n          case ChangeType.JOIN_CHAT:\n            if (chat.verified) {\n              this.refreshChat(chat);\n              this.insertChat(chat);\n            }\n\n            break;\n\n          case ChangeType.LEAVE_PRIVATE_CHAT:\n            if (change.changerUserId == this.userService.user.id) {\n              this.closeCurrentChat();\n              this.removeChat(chat);\n            } else if (chat.verified) {\n              this.insertChat(chat);\n            }\n\n            break;\n\n          case ChangeType.LEAVE_CHAT:\n            if (change.changerUserId == this.userService.user.id) {\n              this.removeChat(chat);\n            } else if (chat.verified) {\n              this.insertChat(chat);\n            }\n\n            break;\n\n          case ChangeType.REMOVE_PARTICIPANT:\n            if (change.targetUserId == this.userService.user.id) {\n              this.closeCurrentChat();\n              this.removeChat(chat);\n              this.snackBar.open(`You have been removed from chat: ${chat.name}`, \"\", {\n                duration: 3000\n              });\n            } else if (chat.verified) {\n              this.insertChat(chat);\n            }\n\n            break;\n\n          case ChangeType.UPDATE_CHAT_USER:\n            if (change.targetUserId == this.userService.user.id && chat.id == ((_a = this.currentChat) === null || _a === void 0 ? void 0 : _a.id)) {\n              if (chat.userChatStatus == UserChatStatus.BANNED) {\n                this.closeCurrentChat();\n                this.snackBar.open(`You have been banned before: ${this.getTimeBlockExpire(chat.dateTimeBlockExpire)}`, \"OK\", {\n                  duration: 5000\n                });\n              } else if (chat.userChatStatus == UserChatStatus.MUTED && this.currentChat.userChatStatus != UserChatStatus.MUTED) {\n                this.snackBar.open(`You have been muted before: ${this.getTimeBlockExpire(chat.dateTimeBlockExpire)}`, \"OK\", {\n                  duration: 5000\n                });\n              }\n            }\n\n            this.refreshChat(chat);\n            break;\n\n          case ChangeType.UPDATE_ACCESS:\n            if (((_b = this.currentChat) === null || _b === void 0 ? void 0 : _b.id) == chat.id && chat.type == ChatType.PROTECTED && !chat.verified) {\n              const dialogRef = this.dialog.open(EnterPasswordComponent, {\n                width: '300px',\n                data: {\n                  chatId: chat.id\n                }\n              });\n              this.snackBar.open(`Password was changed or reset`, \"OK\", {\n                duration: 3000\n              });\n              dialogRef.afterClosed().subscribe(success => {\n                if (success == null || !success) {\n                  this.closeCurrentChat();\n                  this.removeChat(chat);\n                }\n              });\n            } else {\n              this.refreshChat(chat);\n            }\n\n            break;\n        }\n      } else if (chat.verified) {\n        this.insertChat(chat);\n      }\n    }\n\n    getSocket() {\n      return this.socket;\n    }\n\n    updateChat(chatId, chat) {\n      return this.http.put(`/api/chat/${chatId}`, chat);\n    }\n\n    updateAccess(chatId, access) {\n      return this.http.put(`/api/chat/${chatId}/access`, access);\n    }\n\n    findNotParticipants(chatId, name, skip, take) {\n      return this.http.get(`/api/chat/${chatId}/not-participants?name=${name}&take=${take}&skip=${skip}`);\n    }\n\n    addParticipants(chatId, ids) {\n      return this.http.post(`/api/chat/${chatId}/participants?userIds=${ids.join(',')}`, {});\n    }\n\n    findParticipants(chatId, name, skip, take) {\n      return this.http.get(`/api/chat/${chatId}/participants?name=${name}&take=${take}&skip=${skip}`);\n    }\n\n    deleteParticipant(chatId, userId) {\n      return this.http.delete(`/api/chat/${chatId}/participant/${userId}`);\n    }\n\n    leaveChat(chatId) {\n      return this.http.post(`/api/chat/${chatId}/leave`, {});\n    }\n\n    updateChatUser(chatId, participantId, chatUser) {\n      return this.http.put(`/api/chat/${chatId}/participant/${participantId}`, chatUser);\n    }\n\n    createChat(chat) {\n      return this.http.post(`/api/chat`, chat);\n    }\n\n    findChats(name, global, take, skip) {\n      return this.http.get(`/api/chat/my?name=${name}&global=${global}&take=${take}&skip=${skip}`);\n    }\n\n    findChatById(chatId) {\n      return this.http.get(`/api/chat/${chatId}`);\n    }\n\n    getTimeBlockExpire(date) {\n      return date == null ? \"forever\" : new Date(date).toLocaleDateString();\n    }\n\n    joinChat(chatId, password) {\n      if (password != null) {\n        return this.http.post(`/api/chat/${chatId}/join?password=${password}`, null);\n      }\n\n      return this.http.post(`/api/chat/${chatId}/join`, null);\n    }\n\n    uploadAvatar(chatId, avatar) {\n      const formData = new FormData();\n      formData.append('avatar', avatar);\n      return this.http.post(`/api/chat/${chatId}/avatar/upload`, formData);\n    }\n\n    routeToProfile(id) {\n      if (id == this.userService.user.id) {\n        this.router.navigateByUrl('/profile');\n      } else {\n        this.router.navigate(['/user', {\n          id: id\n        }]);\n      }\n    }\n\n    directChat(userId) {\n      return this.http.post(`/api/chat/direct/user/${userId}`, null);\n    }\n\n    blockUser(userId, block) {\n      return this.http.put(`/api/chat/user/${userId}/block`, {\n        block: block\n      });\n    }\n\n    removeChat(chat) {\n      const chatInd = this.chats.findIndex(c => c.id == chat.id);\n\n      if (chatInd >= 0) {\n        this.chats.splice(chatInd, 1);\n      }\n    }\n\n    closeCurrentChat() {\n      this.dialog.closeAll();\n      this.setChat(null, null);\n    }\n\n    listenChatsUpdate() {\n      this.socket.on('/chat/receive', chat => {\n        this.treatChat(chat);\n      });\n    }\n\n    listenError() {\n      this.socket.on('/error', error => {\n        this.snackBar.open(error.error, \"OK\", {\n          duration: 3000\n        });\n      });\n      this.socket.on(\"disconnect\", () => {\n        this.snackBar.open(\"Cannot connect to server\", \"OK\", {\n          duration: 3000\n        });\n      });\n      this.socket.on(\"connect_error\", reason => {\n        this.snackBar.open(\"Cannot connect to server\", \"OK\", {\n          duration: 3000\n        });\n      });\n    }\n\n    insertChat(chat, back = false) {\n      const chatInd = this.chats.findIndex(c => c.id == chat.id);\n      const updatedChat = chatInd >= 0 ? this.chats[chatInd] : chat;\n\n      if (chatInd >= 0) {\n        this.chats.splice(chatInd, 1);\n      }\n\n      if (back) {\n        this.chats.push(updatedChat);\n      } else {\n        this.chats.unshift(updatedChat);\n      }\n    }\n\n    refreshChat(newChat) {\n      var _a, _b;\n\n      newChat.dateTimeBlockExpire = newChat.dateTimeBlockExpire != null ? new Date(newChat.dateTimeBlockExpire) : null;\n      const avatar = newChat.avatar.split(\"?\")[0] + `?${new Date().getTime().toString()}`;\n      const chatInd = this.chats.findIndex(c => c.id == newChat.id);\n\n      if (chatInd >= 0) {\n        const oldChat = this.chats[chatInd];\n        oldChat.name = newChat.name;\n        oldChat.type = newChat.type;\n        oldChat.userChatStatus = newChat.userChatStatus;\n        oldChat.userChatRole = newChat.userChatRole;\n        oldChat.dateTimeBlockExpire = newChat.dateTimeBlockExpire;\n        oldChat.verified = newChat.verified;\n        oldChat.avatar = avatar;\n      } else if (((_a = this.currentChat) === null || _a === void 0 ? void 0 : _a.id) == newChat.id) {\n        this.currentChat.name = newChat.name;\n        this.currentChat.type = newChat.type;\n        this.currentChat.userChatStatus = newChat.userChatStatus;\n        this.currentChat.userChatRole = newChat.userChatRole;\n        this.currentChat.dateTimeBlockExpire = newChat.dateTimeBlockExpire;\n        this.currentChat.verified = newChat.verified;\n        this.currentChat.avatar = avatar;\n      }\n\n      if (((_b = this.currentChatDetails) === null || _b === void 0 ? void 0 : _b.id) == newChat.id) {\n        this.currentChatDetails.type = newChat.type;\n        this.currentChatDetails.name = newChat.name;\n        this.currentChatDetails.avatar = avatar;\n      }\n    }\n\n  }\n\n  ChatService.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatSnackBar), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.UserService), i0.ɵɵinject(i5.MatDialog));\n  };\n\n  ChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { ChatType, UserChatRole, UserChatStatus } from \"../../services/chat.service\";\nimport { FormControl } from \"@angular/forms\";\nimport { debounceTime, distinctUntilChanged, map } from \"rxjs\";\nimport { ChatCreateNewComponent } from \"../chat-create-new/chat-create-new.component\";\nimport { EnterPasswordComponent } from \"../enter-password/enter-password.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/user.service\";\nimport * as i2 from \"../../services/chat.service\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/tooltip\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"ngx-infinite-scroll\";\nimport * as i12 from \"@angular/common\";\nimport * as i13 from \"@angular/material/chips\";\n\nfunction ChatListComponent_div_10_mat_chip_list_6_mat_chip_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip\", 20);\n    i0.ɵɵtext(1, \"B\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const chat_r1 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matTooltip\", ctx_r5.getTimeBlockExpire(chat_r1));\n  }\n}\n\nfunction ChatListComponent_div_10_mat_chip_list_6_mat_chip_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip\", 21);\n    i0.ɵɵtext(1, \"M\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const chat_r1 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matTooltip\", ctx_r6.getTimeBlockExpire(chat_r1));\n  }\n}\n\nfunction ChatListComponent_div_10_mat_chip_list_6_mat_chip_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const chat_r1 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matTooltip\", \"Role: \" + chat_r1.userChatRole.toLowerCase())(\"selected\", ctx_r7.getColor(chat_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(chat_r1.userChatRole.slice(0, 1));\n  }\n}\n\nfunction ChatListComponent_div_10_mat_chip_list_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-chip-list\");\n    i0.ɵɵtemplate(1, ChatListComponent_div_10_mat_chip_list_6_mat_chip_1_Template, 2, 1, \"mat-chip\", 17);\n    i0.ɵɵtemplate(2, ChatListComponent_div_10_mat_chip_list_6_mat_chip_2_Template, 2, 1, \"mat-chip\", 18);\n    i0.ɵɵtemplate(3, ChatListComponent_div_10_mat_chip_list_6_mat_chip_3_Template, 2, 3, \"mat-chip\", 19);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const chat_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", chat_r1.userChatStatus == \"BANNED\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", chat_r1.userChatStatus == \"MUTED\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", chat_r1.userChatStatus == \"ACTIVE\");\n  }\n}\n\nfunction ChatListComponent_div_10_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 23);\n  }\n}\n\nfunction ChatListComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelementStart(1, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function ChatListComponent_div_10_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const chat_r1 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onSelect(chat_r1);\n    });\n    i0.ɵɵelement(2, \"img\", 12);\n    i0.ɵɵelementStart(3, \"div\", 13);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 14);\n    i0.ɵɵtemplate(6, ChatListComponent_div_10_mat_chip_list_6_Template, 4, 3, \"mat-chip-list\", 15);\n    i0.ɵɵtemplate(7, ChatListComponent_div_10_ng_template_7_Template, 1, 0, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const chat_r1 = ctx.$implicit;\n\n    const _r3 = i0.ɵɵreference(8);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r0.selectedChat != null && chat_r1.id == ctx_r0.selectedChat.id ? \"select-chat-hover\" : \"select-chat\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", chat_r1.avatar, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(chat_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showChip(chat_r1))(\"ngIfElse\", _r3);\n  }\n}\n\nexport let ChatListComponent = /*#__PURE__*/(() => {\n  class ChatListComponent {\n    constructor(userService, chatService, http, dialog) {\n      this.userService = userService;\n      this.chatService = chatService;\n      this.http = http;\n      this.dialog = dialog;\n      this.selectedChatEvent = new EventEmitter();\n      this.selectedChat = null;\n      this.searchName = new FormControl();\n      this.name = '';\n      this.chats = [];\n      this.allChats = null;\n      this.return = false;\n      this.global = false;\n      this.pageSize = 100;\n      this.user = userService.user;\n      this.selectedChat = chatService.getChat();\n      this.chatService.setChats(this.chats);\n    }\n\n    ngOnInit() {\n      this.nextPage();\n      this.searchName.valueChanges.pipe(debounceTime(500), distinctUntilChanged(), map(chatName => {\n        this.name = chatName;\n        this.findChats();\n      })).subscribe();\n    }\n\n    ngAfterViewInit() {}\n\n    findChats() {\n      if (this.name != null && this.name.length > 0 || this.global) {\n        if (this.allChats == null) {\n          this.allChats = this.chats;\n          this.return = true;\n        }\n\n        this.chats = [];\n        this.nextPage();\n      } else if (this.allChats != null) {\n        this.chats = this.allChats;\n        this.allChats = null;\n        this.return = false;\n      }\n    }\n\n    nextPage() {\n      this.chatService.findChats(this.name, this.global, this.pageSize, this.chats.length).subscribe(page => {\n        page.chats.forEach(chat => this.insertChat(this.chats, chat));\n      });\n    }\n\n    onSelect(chat) {\n      if (this.return) {\n        this.searchName.setValue(\"\");\n      }\n\n      if (chat.verified || chat.type == ChatType.PUBLIC) {\n        this.selectedChatEvent.emit(chat);\n        this.selectedChat = chat;\n      } else {\n        this.joinInChat(chat);\n      }\n    }\n\n    addChat() {\n      this.dialog.open(ChatCreateNewComponent, {\n        width: '450px',\n        height: '575px',\n        backdropClass: \"backdrop-dialog\"\n      });\n    }\n\n    changeSearch() {\n      this.global = !this.global;\n      this.findChats();\n    }\n\n    getSearchColor() {\n      return this.global ? \"primary\" : undefined;\n    }\n\n    getSearchPlaceHolder() {\n      return this.global ? \"Global search by name ...\" : \"Local search by name ...\";\n    }\n\n    joinInChat(chat) {\n      if (chat == null) {\n        return;\n      }\n\n      if (chat.type == ChatType.PROTECTED) {\n        const dialogRef = this.dialog.open(EnterPasswordComponent, {\n          width: '300px',\n          data: {\n            chatId: chat.id\n          }\n        });\n        dialogRef.afterClosed().subscribe(success => {\n          if (success) {\n            chat.verified = true;\n\n            if (chat.userChatStatus == null) {\n              chat.userChatStatus = UserChatStatus.ACTIVE;\n              chat.userChatRole = UserChatRole.PARTICIPANT;\n            }\n\n            this.onSelect(chat);\n          }\n        });\n      } else {\n        this.chatService.joinChat(chat.id, null).subscribe(() => this.onSelect(chat));\n      }\n    }\n\n    getTimeBlockExpire(chat) {\n      if (chat.userChatStatus == UserChatStatus.BANNED) {\n        return `Status: banned before '${this.chatService.getTimeBlockExpire(chat.dateTimeBlockExpire)}'`;\n      }\n\n      return `Status: muted before '${this.chatService.getTimeBlockExpire(chat.dateTimeBlockExpire)}'`;\n    }\n\n    insertChat(chats, chat, back = true) {\n      const chatInd = chats.findIndex(c => c.id == chat.id);\n\n      if (chatInd >= 0) {\n        chats.splice(chatInd, 1);\n      }\n\n      if (back) {\n        chats.push(chat);\n      } else {\n        chats.unshift(chat);\n      }\n    }\n\n    getColor(chat) {\n      var _a;\n\n      return !(chat.id == ((_a = this.selectedChat) === null || _a === void 0 ? void 0 : _a.id) || chat.userChatRole != UserChatRole.OWNER);\n    }\n\n    showChip(chat) {\n      if (!chat.verified || chat.type == ChatType.DIRECT) {\n        return false;\n      }\n\n      if (chat.userChatStatus != UserChatStatus.ACTIVE) {\n        return true;\n      }\n\n      return chat.userChatRole == UserChatRole.OWNER || this.global;\n    }\n\n  }\n\n  ChatListComponent.ɵfac = function ChatListComponent_Factory(t) {\n    return new (t || ChatListComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.ChatService), i0.ɵɵdirectiveInject(i3.HttpClient), i0.ɵɵdirectiveInject(i4.MatDialog));\n  };\n\n  ChatListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatListComponent,\n    selectors: [[\"app-chat-list\"]],\n    outputs: {\n      selectedChatEvent: \"selectedChatEvent\"\n    },\n    decls: 12,\n    vars: 8,\n    consts: [[1, \"chat-list-block\"], [1, \"chat-list-search\"], [\"appearance\", \"outline\", 1, \"chat-name\", 2, \"flex-basis\", \"calc(100% - 40px - 5px)\"], [\"matInput\", \"\", \"type\", \"search\", \"minlength\", \"1\", \"maxlength\", \"50\", \"autocomplete\", \"off\", 1, \"chat-name-input\", 3, \"placeholder\", \"formControl\"], [\"matSuffix\", \"\", 2, \"cursor\", \"pointer\", 3, \"color\", \"matTooltip\", \"click\"], [\"mat-icon-button\", \"\", \"color\", \"primary\", \"aria-label\", \"Create new chat\", \"matTooltip\", \"Create new chat\", 2, \"margin-top\", \"10px\", \"height\", \"40px\", \"width\", \"40px\", 3, \"click\"], [2, \"font-size\", \"40px\", \"width\", \"40px\", \"padding\", \"0\"], [\"infiniteScroll\", \"\", 1, \"chat-list-content\", 3, \"scrollWindow\", \"infiniteScrollUpDistance\", \"infiniteScrollThrottle\", \"scrolled\"], [\"class\", \"chat-row\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"joinInChat\", \"hidden\", \"\", 3, \"click\"], [1, \"chat-row\"], [3, \"click\"], [\"alt\", \"AV\", 1, \"chat-avatar\", 3, \"src\"], [1, \"chat-name\"], [1, \"user-status-role\"], [4, \"ngIf\", \"ngIfElse\"], [\"withoutChip\", \"\"], [\"class\", \"chat-chip\", \"color\", \"warn\", \"selected\", \"\", 3, \"matTooltip\", 4, \"ngIf\"], [\"class\", \"chat-chip\", \"color\", \"accent\", \"selected\", \"\", 3, \"matTooltip\", 4, \"ngIf\"], [\"class\", \"chat-chip\", \"color\", \"primary\", 3, \"matTooltip\", \"selected\", 4, \"ngIf\"], [\"color\", \"warn\", \"selected\", \"\", 1, \"chat-chip\", 3, \"matTooltip\"], [\"color\", \"accent\", \"selected\", \"\", 1, \"chat-chip\", 3, \"matTooltip\"], [\"color\", \"primary\", 1, \"chat-chip\", 3, \"matTooltip\", \"selected\"], [1, \"chat-chip\"]],\n    template: function ChatListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"mat-form-field\", 2);\n        i0.ɵɵelement(3, \"input\", 3);\n        i0.ɵɵelementStart(4, \"mat-icon\", 4);\n        i0.ɵɵlistener(\"click\", function ChatListComponent_Template_mat_icon_click_4_listener() {\n          return ctx.changeSearch();\n        });\n        i0.ɵɵtext(5, \" travel_explore \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function ChatListComponent_Template_button_click_6_listener() {\n          return ctx.addChat();\n        });\n        i0.ɵɵelementStart(7, \"mat-icon\", 6);\n        i0.ɵɵtext(8, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵlistener(\"scrolled\", function ChatListComponent_Template_div_scrolled_9_listener() {\n          return ctx.nextPage();\n        });\n        i0.ɵɵtemplate(10, ChatListComponent_div_10_Template, 9, 6, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 9);\n        i0.ɵɵlistener(\"click\", function ChatListComponent_Template_div_click_11_listener() {\n          return ctx.joinInChat(ctx.selectedChat);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"placeholder\", ctx.getSearchPlaceHolder())(\"formControl\", ctx.searchName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"color\", ctx.getSearchColor())(\"matTooltip\", ctx.global ? \"Change to local search\" : \"Change to global search\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"scrollWindow\", false)(\"infiniteScrollUpDistance\", 10)(\"infiniteScrollThrottle\", 100);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.chats);\n      }\n    },\n    directives: [i5.MatFormField, i6.MatInput, i7.DefaultValueAccessor, i7.MinLengthValidator, i7.MaxLengthValidator, i7.NgControlStatus, i7.FormControlDirective, i8.MatIcon, i5.MatSuffix, i9.MatTooltip, i10.MatButton, i11.InfiniteScrollDirective, i12.NgForOf, i12.NgIf, i13.MatChipList, i13.MatChip],\n    styles: [\".chat-list-block[_ngcontent-%COMP%]{width:100%;height:100%;display:flex;flex-direction:column}.chat-list-header-title[_ngcontent-%COMP%]{margin:auto;font-size:14pt}.chat-list-search[_ngcontent-%COMP%]{flex-basis:45px;display:flex;flex-direction:row;justify-content:space-between}.chat-name-input[_ngcontent-%COMP%]{width:100%;height:100%!important;padding:0!important}.chat-list-content[_ngcontent-%COMP%]{flex-basis:calc(100% - 45px);width:100%;overflow-y:auto;scrollbar-width:thin}.chat-row[_ngcontent-%COMP%]{width:100%;height:auto}[class*=select-chat][_ngcontent-%COMP%]{width:100%;height:100%;padding:4px 10px 4px 5px;display:flex;flex-direction:row;align-items:center;justify-content:space-between;border:none;text-align:left;background:white}.select-chat-hover[_ngcontent-%COMP%]{background:#673ab6;color:#fff}.select-chat[_ngcontent-%COMP%]:hover{background:#e8e8e8;cursor:auto}.select-chat[disabled][_ngcontent-%COMP%]{color:silver}.select-chat[disabled][_ngcontent-%COMP%]:hover{background:white}.chat-avatar[_ngcontent-%COMP%]{background-color:#fff;width:40px;height:40px;border-radius:50%}.chat-name[_ngcontent-%COMP%]{font-size:11pt;flex-basis:calc(100% - 90px);word-break:break-all;padding-right:5px}.chat-chip[_ngcontent-%COMP%]{align-items:center;justify-content:center;width:30px;height:30px;min-height:30px;font-size:8pt}\"]\n  });\n  return ChatListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, forwardRef, Component, ViewEncapsulation, Optional, Self, ViewChild, ContentChild, Input, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i2 from '@angular/forms';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { MatInputModule } from '@angular/material/input';\nconst _c0 = [\"inputFile\"];\nconst _c1 = [\"inputValue\"];\n\nfunction NgxMatFileInputComponent_mat_icon_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 7);\n    i0.ɵɵtext(1, \"attach_file\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c2 = [[[\"\", \"ngxMatFileInputIcon\", \"\"]]];\nconst _c3 = [\"[ngxMatFileInputIcon]\"];\nlet nextUniqueId = 0;\n\nconst _NgxMatInputMixinBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n});\n\nlet NgxMatFileInputIcon = /*#__PURE__*/(() => {\n  class NgxMatFileInputIcon {}\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  NgxMatFileInputIcon.ɵfac = function NgxMatFileInputIcon_Factory(t) {\n    return new (t || NgxMatFileInputIcon)();\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  NgxMatFileInputIcon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxMatFileInputIcon,\n    selectors: [[\"\", \"ngxMatFileInputIcon\", \"\"]]\n  });\n  return NgxMatFileInputIcon;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxMatFileInputComponent = /*#__PURE__*/(() => {\n  class NgxMatFileInputComponent extends _NgxMatInputMixinBase {\n    constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {\n      super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n      this._elementRef = _elementRef;\n      this._platform = _platform;\n      this._cd = _cd;\n      this.ngControl = ngControl;\n      this.color = 'primary';\n      this.fileNames = null;\n      this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;\n      this.stateChanges = new Subject();\n      this.focused = false;\n      this.controlType = 'ngx-mat-file-input';\n      this.autofilled = false;\n      /** Function when touched */\n\n      this._onTouched = () => {};\n      /** Function when changed */\n\n\n      this._onChange = () => {};\n\n      this._disabled = false;\n      this._multiple = false;\n      this.placeholder = 'Choose a file';\n      this.separator = ',';\n      this._required = false;\n      this._readonly = true;\n      this.id = this.id;\n\n      if (this.ngControl) {\n        this.ngControl.valueAccessor = this;\n      }\n    }\n\n    get disabled() {\n      if (this.ngControl && this.ngControl.disabled !== null) {\n        return this.ngControl.disabled;\n      }\n\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      if (this.focused) {\n        this.focused = false;\n        this.stateChanges.next();\n      }\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this._id = value || this._uid;\n    }\n\n    get multiple() {\n      return this._multiple;\n    }\n\n    set multiple(value) {\n      this._multiple = coerceBooleanProperty(value);\n    }\n\n    get required() {\n      return this._required;\n    }\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      this._value = value;\n    }\n\n    get readonly() {\n      return this._readonly;\n    }\n\n    set readonly(value) {\n      this._readonly = coerceBooleanProperty(value);\n    }\n    /**\r\n     * Limiting accepted file types\r\n     * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" — Accept PNG or JPEG files.\r\n     */\n\n\n    get accept() {\n      return this._accept;\n    }\n\n    set accept(value) {\n      this._accept = value;\n    }\n\n    ngOnChanges() {\n      this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n      this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n      if (this.ngControl) {\n        this.updateErrorState();\n      }\n    } // Implemented as part of ControlValueAccessor.\n\n\n    writeValue(value) {\n      this._updateInputValue(value);\n    } // Implemented as part of ControlValueAccessor.\n\n\n    registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.stateChanges.next();\n    }\n    /** Focuses the input. */\n\n\n    focus(options) {\n      this._inputValueRef.nativeElement.focus(options);\n    }\n\n    _focusChanged(isFocused) {\n      if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n        this.focused = isFocused;\n        this.stateChanges.next();\n      }\n    }\n    /** Mark the field as touched */\n\n\n    _markAsTouched() {\n      this._onTouched();\n\n      this._cd.markForCheck();\n\n      this.stateChanges.next();\n    }\n\n    _isBadInput() {\n      let validity = this._inputValueRef.nativeElement.validity;\n      return validity && validity.badInput;\n    }\n\n    get empty() {\n      return !this._inputValueRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n    }\n\n    get shouldLabelFloat() {\n      return this.focused || !this.empty;\n    }\n\n    setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    }\n\n    openFilePicker(event) {\n      this._inputFileRef.nativeElement.click();\n\n      if (event) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      this._markAsTouched();\n    }\n\n    handleFiles(filelist) {\n      if (filelist.length > 0) {\n        const files = new Array();\n\n        for (let i = 0; i < filelist.length; i++) {\n          files.push(filelist.item(i));\n        }\n\n        this._updateInputValue(files);\n\n        this._resetInputFile();\n\n        this._onChange(this.multiple ? files : files[0]);\n      }\n    }\n    /** Handles a click on the control's container. */\n\n\n    onContainerClick(event) {}\n\n    _resetInputFile() {\n      this._inputFileRef.nativeElement.value = \"\";\n    }\n\n    _updateInputValue(files) {\n      let text = null;\n\n      if (files) {\n        if (Array.isArray(files)) {\n          text = this._multiple ? files.map(x => x.name).join(this.separator) : files[0].name;\n        } else {\n          text = files.name != null ? files.name : null;\n        }\n      }\n\n      this._inputValueRef.nativeElement.value = text;\n    }\n\n  }\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  NgxMatFileInputComponent.ɵfac = function NgxMatFileInputComponent_Factory(t) {\n    return new (t || NgxMatFileInputComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.NgControl, 10), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher));\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  NgxMatFileInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxMatFileInputComponent,\n    selectors: [[\"ngx-mat-file-input\"]],\n    contentQueries: function NgxMatFileInputComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, NgxMatFileInputIcon, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n      }\n    },\n    viewQuery: function NgxMatFileInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputFileRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputValueRef = _t.first);\n      }\n    },\n    hostAttrs: [1, \"ngx-mat-file-input\"],\n    inputs: {\n      color: \"color\",\n      disabled: \"disabled\",\n      id: \"id\",\n      multiple: \"multiple\",\n      placeholder: \"placeholder\",\n      separator: \"separator\",\n      required: \"required\",\n      errorStateMatcher: \"errorStateMatcher\",\n      value: \"value\",\n      readonly: \"readonly\",\n      accept: \"accept\"\n    },\n    exportAs: [\"ngx-mat-file-input\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: forwardRef(() => NgxMatFileInputComponent)\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c3,\n    decls: 8,\n    vars: 13,\n    consts: [[\"autocomplete\", \"off\", 1, \"mat-input-element\", \"mat-form-field-autofill-control\", 3, \"disabled\", \"required\"], [\"inputValue\", \"\"], [1, \"mat-form-field-suffix\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"type\", \"button\", 1, \"button-browse\", 3, \"color\", \"disabled\", \"click\"], [\"class\", \"ngx-mat-file-input--default-icon\", 4, \"ngIf\"], [\"type\", \"file\", 1, \"input-file\", 3, \"multiple\", \"accept\", \"change\"], [\"inputFile\", \"\"], [1, \"ngx-mat-file-input--default-icon\"]],\n    template: function NgxMatFileInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c2);\n        i0.ɵɵelement(0, \"input\", 0, 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function NgxMatFileInputComponent_Template_button_click_3_listener($event) {\n          return ctx.openFilePicker($event);\n        });\n        i0.ɵɵtemplate(4, NgxMatFileInputComponent_mat_icon_4_Template, 2, 0, \"mat-icon\", 4);\n        i0.ɵɵprojection(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 5, 6);\n        i0.ɵɵlistener(\"change\", function NgxMatFileInputComponent_Template_input_change_6_listener($event) {\n          return ctx.handleFiles($event.target.files);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        i0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"color\", ctx.color)(\"disabled\", ctx.disabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx._customIcon);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"multiple\", ctx.multiple)(\"accept\", ctx.accept);\n      }\n    },\n    directives: [i4.MatButton, i5.MatIcon, i6.MatSuffix, i7.NgIf],\n    styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}\\n\"],\n    encapsulation: 2\n  });\n  return NgxMatFileInputComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxMatFileInputModule = /*#__PURE__*/(() => {\n  class NgxMatFileInputModule {}\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  NgxMatFileInputModule.ɵfac = function NgxMatFileInputModule_Factory(t) {\n    return new (t || NgxMatFileInputModule)();\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  NgxMatFileInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxMatFileInputModule\n  });\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n  NgxMatFileInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatButtonModule, MatIconModule, MatFormFieldModule, MatInputModule]]\n  });\n  return NgxMatFileInputModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction calculFileSize(number) {\n  if (number < 1024) {\n    return number + 'bytes';\n  } else if (number >= 1024 && number < 1048576) {\n    return (number / 1024).toFixed(1) + 'KB';\n  } else if (number >= 1048576) {\n    return (number / 1048576).toFixed(1) + 'MB';\n  }\n}\n/**\r\n * Validator for size of file\r\n * @param max Max of size of file (in bytes)\r\n */\n\n\nfunction MaxSizeValidator(max) {\n  return ctrl => {\n    max = Number(max);\n\n    if (isNaN(max)) {\n      throw 'MaxSizeValidator: max of size of file is invalid';\n    }\n\n    if (!ctrl.value) return null;\n    let files = ctrl.value;\n\n    if (!Array.isArray(ctrl.value)) {\n      files = [ctrl.value];\n    }\n\n    if (!files.length) return null;\n\n    const add = (a, b) => a + b;\n\n    const sumSize = files.map(x => x.size).reduce(add);\n\n    if (sumSize > max) {\n      return {\n        maxSize: true\n      };\n    }\n\n    return null;\n  };\n}\n/**\r\n *\r\n * @param accept Allowable type of file\r\n */\n\n\nfunction AcceptValidator(accept) {\n  return ctrl => {\n    if (!accept) {\n      throw 'AcceptValidator: allowable type of file can not be empty';\n    }\n\n    if (ctrl.value == null) return null;\n\n    if (!accept.includes(ctrl.value.type)) {\n      return {\n        accept: true\n      };\n    }\n\n    return null;\n  };\n}\n/*\r\n * Public API Surface of file-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AcceptValidator, MaxSizeValidator, NgxMatFileInputComponent, NgxMatFileInputIcon, NgxMatFileInputModule, calculFileSize }; //# sourceMappingURL=angular-material-components-file-input.mjs.map","map":null,"metadata":{},"sourceType":"module"}
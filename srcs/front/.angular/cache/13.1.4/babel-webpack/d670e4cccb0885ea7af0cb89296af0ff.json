{"ast":null,"code":"import { Profile } from '../login/profile.interface';\nimport { BehaviorSubject } from 'rxjs';\nimport { retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./game.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    // public friends: Observable<User[]> | undefined;\n    constructor(http, gameService) {\n      this.http = http;\n      this.gameService = gameService;\n      this.user = new Profile();\n      this._user = new BehaviorSubject(this.user);\n      this.getUserProfile().subscribe(data => {\n        this.setUser(data);\n        this.user = data;\n        gameService.init(this);\n      }); // this.friends = this.getFriends();\n      // this.getUserProfile().subscribe((data: Profile) => this.user = { ...data });\n    }\n\n    getUserProfile() {\n      return this.http.get('/api/user/me').pipe(retry(3));\n    }\n\n    getUserAsObservable() {\n      return this._user.asObservable();\n    }\n\n    setUser(user) {\n      this.user = user;\n\n      this._user.next(this.user);\n    }\n\n    getUserInfo(userId) {\n      return this.http.get('/api/user/user', {\n        params: {\n          userId: userId\n        }\n      });\n    }\n\n    updatePicTimestamp() {\n      setTimeout(() => {\n        const d = new Date();\n        this.user.avatarImgName += '?' + d.getTime().toString();\n      }, 250);\n    }\n\n    setUserName(username) {\n      return this.http.post('/api/user/set_username', {\n        username: username\n      }, {\n        observe: 'response'\n      });\n    }\n\n    changeAvatar(avatar) {\n      console.log('Avatar:');\n      console.log({\n        avatar: avatar\n      });\n      const formData = new FormData();\n      formData.append('avatar', avatar);\n      return this.http.post('/api/user/set_avatar', formData, {\n        reportProgress: true,\n        observe: 'events'\n      });\n    }\n\n    searchUserByUsername(username, filter = 0) {\n      return this.http.get('/api/user/search_friend', {\n        params: {\n          username: username,\n          take: 10,\n          skip: 0,\n          filter_friends: filter\n        }\n      });\n    }\n\n    getFriends() {\n      return this.http.get('/api/user/friends');\n    }\n\n    addFriend(user_id) {\n      return this.http.post('/api/user/add_friend', {\n        friend_id: user_id\n      }, {\n        observe: 'response'\n      });\n    } // private handleError(error: HttpErrorResponse) {\n    //   if (error.status === 0) {\n    //     // A client-side or network error occurred. Handle it accordingly.\n    //     console.error('An error occurred:', error.error);\n    //   } else {\n    //     // The backend returned an unsuccessful response code.\n    //     // The response body may contain clues as to what went wrong.\n    //     console.error(\n    //       `Backend returned code ${error.status}, body was: `, error.error);\n    //   }\n    //   // Return an observable with a user-facing error message.\n    //   return throwError(\n    //     'Something bad happened; please try again later.');\n    // }\n    // appendFriend(body: User) {\n    //   if (this.friends == undefined)\n    //     this.friends = EMPTY;\n    //   this.friends.pipe(tap(list => {\n    //     list.push(body);\n    //   }));\n    //   console.log(\"New user aded \" + body.username);\n    // }\n\n\n    removeFriend(selectedUser) {\n      return this.http.delete('/api/user/delete_friend', {\n        body: {\n          friend_id: selectedUser.id\n        }\n      });\n    }\n\n    profileUpdate() {\n      this.getUserProfile().subscribe(data => {\n        this.user = data;\n      });\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GameService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}